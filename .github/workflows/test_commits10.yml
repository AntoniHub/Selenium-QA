# This workflow is an example of DevOps practices applied in daily testing.
# The main feature of this WorkFlow is Figlet, an ascii art on these executions.

# ===============================================
# Yo can see some of my skills on my sites:      |
# https://www.linkedin.com/in/arodriguezfarias/  |
# https://rodriguezfarias.com/                   |
# ==============================================

name: QA Engineer | Antonio Rodriguez Farias

on:
  schedule:
    - cron: '*/15 * * * *'
  # workflow_dispatch:

jobs:
  test_figlet:
    if: github.event.schedule == '*/15 * * * *'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    defaults:
      run:
        working-directory: Playwright-Pytest
    env:
      GH_TOKEN: ${{ secrets.PAT }}
      API_KEY: ${{ secrets.API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master


      - name: Set up Docker apt repository
        id: setDocker
        run: |
          sudo apt-get -y update
          sudo apt-get install -y ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get -y update
        continue-on-error: true

      - name: Install the Docker packages
        id: installDocker
        run: |
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        continue-on-error: true

      - name: Verify that the Docker Engine installation is successful
        id: verifyDocker
        run: |
          sudo docker run hello-world
        continue-on-error: true


      - name: Install OpenJDK 17
        id: installJava
        run: |
          sudo apt -y update
          sudo apt install -y fontconfig openjdk-17-jre
        continue-on-error: true


      - name: Install Jenkins
        id: installJenkins
        run: |
          sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
          https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
          echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
          https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
          /etc/apt/sources.list.d/jenkins.list > /dev/null
          sudo apt-get -y update
          sudo apt-get install -y jenkins
        continue-on-error: true

      - name: Start Jenkins
        id: startJenkins
        run: |
          sudo systemctl start jenkins
          sudo systemctl status jenkins
        continue-on-error: true


      - name: Install & Run Figlet
        id: installFiglet
        if: always()
        run: |
          sudo apt install -y figlet
          figlet -c Antonio Rodriguez > file.txt
          date >> file.txt

      - name: Date
        run: echo "DATE=$(date +'%H%M-%Y-%m-%d')" >> $GITHUB_ENV
      - name: Upload Figlet File
        id: uploadFile
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ env.DATE }}
          path: Playwright-Pytest/file.txt

       
      - name: Push to Repo
        uses: actions-x/commit@v6
        with:
          email: abgrodriguezfarias@gmail.com
          name: Antonio Rodriguez Farias
          message: QA Engineer | Antonio Rodriguez Farias
          branch: master
          files: file.txt
          repository: https://github.com/AntoniHub/C0D3X.git
          token: ${{ secrets.PAT }}
          force: true
          directory: "Playwright-Pytest"


      - name: Verify RUN
        if: >-
          steps.setDocker.outcome != 'success' ||
          steps.installDocker.outcome != 'success' ||
          steps.verifyDocker.outcome != 'success' ||
          steps.installJava.outcome != 'success' ||
          steps.installJenkins.outcome != 'success' ||
          steps.startJenkins.outcome != 'success' ||
          steps.installFiglet.outcome != 'success'
        run: |
          echo "El paso setDocker fue: ${{ steps.setDocker.outcome }}"
          echo "El paso installDocker fue: ${{ steps.installDocker.outcome }}"
          echo "El paso verifyDocker fue: ${{ steps.verifyDocker.outcome }}"
          echo "El paso installJava fue: ${{ steps.installJava.outcome }}"
          echo "El paso installJenkins fue: ${{ steps.installJenkins.outcome }}"
          echo "El paso startJenkins fue: ${{ steps.startJenkins.outcome }}"
          echo "El paso installFiglet fue: ${{ steps.installFiglet.outcome }}"
          exit 1
